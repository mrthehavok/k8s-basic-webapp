apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  namespace: learning-ns
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: python:3.9-slim
          ports:
            - containerPort: 5000
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: logs-volume
              mountPath: /app/logs
          command: ["/bin/sh", "-c"]
          args:
            - |
              set -e
              pip install Flask pytz
              cat <<'PY' > app.py
              from flask import Flask, jsonify, request
              from datetime import datetime
              import pytz

              app = Flask(__name__)

              @app.route("/time")
              def get_time():
                  return jsonify({"time": datetime.now().isoformat()})

              @app.route("/tz")
              def tz_diff():
                  tz1_name = request.args.get("tz1", "UTC")
                  tz2_name = request.args.get("tz2", "UTC")
                  try:
                      tz1 = pytz.timezone(tz1_name)
                      tz2 = pytz.timezone(tz2_name)
                      now = datetime.now()
                      offset1 = now.astimezone(tz1).utcoffset().total_seconds() / 3600
                      offset2 = now.astimezone(tz2).utcoffset().total_seconds() / 3600
                      return jsonify({"diff_hours": offset1 - offset2})
                  except pytz.UnknownTimeZoneError as e:
                      return jsonify({"error": str(e)}), 400

              if __name__ == "__main__":
                  app.run(host="0.0.0.0", port=5000)
              PY
              python app.py
      volumes:
        - name: config-volume
          configMap:
            name: backend-config
        - name: logs-volume
          persistentVolumeClaim:
            claimName: backend-logs-pvc
